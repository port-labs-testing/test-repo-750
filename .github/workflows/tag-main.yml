name: Tag main branch
on:
  push:
    branches:
      - main
    paths:
      - 'pyproject.toml'
  # manual run
  workflow_dispatch:


jobs:
  tag-main:
    permissions:
      contents: write

    runs-on: ubuntu-latest
    outputs:
      current_tag: ${{ steps.get_current_version.outputs.current_tag }}
      prev_tag: ${{ steps.get_previous_version.outputs.prev_tag }}

    steps:
      - name: Check out code
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: Get current version
        id: get_current_version
        run: |
          # Get the current version from pyproject.toml
          CURRENT_TAG=$(grep -E '^version = ".*"' pyproject.toml | cut -d'"' -f2)
          echo "current_tag=${CURRENT_TAG}" >> $GITHUB_ENV
          echo "::set-output name=current_tag::${CURRENT_TAG}"

      - name: Get previous version
        id: get_previous_version
        run: |
          # Get the version from the previous commit for comparison
          PREV_TAG=$(git show HEAD~1:pyproject.toml | grep -E '^version = ".*"' | cut -d'"' -f2)
          echo "prev_tag=${PREV_TAG}" >> $GITHUB_ENV
          echo "::set-output name=prev_tag::${PREV_TAG}"

      - name: Tag main
        run: |
          if [ "${current_tag}" == "${prev_tag}" ]; then
            echo "Version has not changed. Skipping tagging."
            exit 0
          fi
          git config --global user.email "bot@email.com"
          git config --global user.name "bot"
          LATEST_COMMIT_MESSAGE=$(git log -1 --pretty=format:%s)
          git tag -a "v${current_tag}" -m "${LATEST_COMMIT_MESSAGE}"
          git push origin main --tags
          echo "::set-output name=current_tag::${CURRENT_TAG}"
          echo "::set-output name=prev_tag::${PREV_TAG}"

  create-release:
    needs: tag-main
    if: needs.tag-main.outputs.current_tag != needs.tag-main.outputs.prev_tag
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Release
        uses: actions/create-release@v1
        with:
          tag_name: ${{ needs.tag-main.outputs.current_tag }}
          release_name: "Release ${{ needs.tag-main.outputs.current_tag }}"
          body: |
            Automated release created for version ${{ needs.tag-main.outputs.current_tag }}.
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

